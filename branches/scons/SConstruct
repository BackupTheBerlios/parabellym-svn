# SCons script for parabellym.
# $Id$
# vim:ts=2:sts=2:sw=2:et:nocindent:syntax=python

import os
import re
import string

class Finder:
  # A function to list files in a directory.
  def listFilesW(self, at, r):
    nodes = []
    for location in at:
      for file in os.listdir(location):
        fname = os.path.join(location, file)
        if os.path.isfile(fname):
          if r.match(file):
            nodes.append(fname)
        elif os.path.isdir(fname):
          if not fname == '.svn':
            for more in self.listFilesW([fname], r):
              nodes.append(more)
    return nodes

  def listFiles(self, at, r):
    l = self.listFilesW(at, re.compile(r))
    l.sort()
    return l

  def compile(self, env, paths):
    objs = []
    for item in self.listFiles(paths, r'^.*(\.cc)$'):
      fname, ext = os.path.splitext(item)
      if env.has_key('category'):
        fname = fname + '~' + env['category']
      if env['debug'] == 1:
        fname = fname + '~debug'
      objs.append(env.SharedObject(fname + '.o', item))
    return objs

# Version number.
version = '1.0'

Help("""
Usage: scons [options]

The following options are available:

  debug=yes   : include debug symbols and output.
  release=yes : set when you are preparing a release package.
  modules=yes : build sample modules, too.
  stubs=yes   : build loaders, too.

Send your comments to Justin Forest <justin.forest@gmail.com>
""")

# The directory in which built files are stored.
output_dir = 'build'

fnd = Finder()

# Build options.
opts = Options('config.options')
opts.Add(BoolOption('debug', 'Set to include debug symbols and output', False))
opts.Add(BoolOption('modules', 'Set to build sample modules', False))
opts.Add(BoolOption('stubs', 'Set to build sample stubs', False))
opts.Add(BoolOption('release', 'Set this option only if you are preparing a release', False))
opts.Add(EnumOption('build_tool', 'Override the build tool (for maintainers mostly)', 'default', allowed_values = ('default', 'mingw'), ignorecase = 1))

# The default environment.
env = Environment(options = opts)

# Override the tool if there are many installed.
if env['build_tool'] != 'default':
  env = Environment(tools = [env['build_tool']], options = opts)

env.Append(CPPDEFINES = [('VERSION', '\\"' + version + '\\"'), ('SOEXT', '\\"' + env['SHLIBSUFFIX'] + '\\"')])

# Check the system configuration if we're not cleaning up.
if env.GetOption('clean'):
  print 'Skipping autoconfiguration due to a clean-up.'
else:
  print 'Configuring for platform: ' + env['PLATFORM'] + '.'
  conf = Configure(env)

  if os.environ.has_key('CPATH'):
    for em in string.split(os.environ['CPATH'], ';'):
      env.Append(CPPPATH = em)
      print 'Found directory %s in the environment.' % (em)
#  if os.environ.has_key('LIBRARY_PATH'):
#    for em in string.split(os.environ['LIBRARY_PATH'], ';'):
#      env.Append(LIBPATH = em)
#      print 'Importing library directory %s from the environment.' % (em)

  if not conf.CheckFunc('strlcpy'):
    conf.env.Append(CPPDEFINES = 'strlcpy=strlcpy_local')
  if not conf.CheckFunc('daemon'):
    conf.env.Append(CPPDEFINES = 'daemon=daemon_local')
  if conf.CheckFunc('getopt'):
    conf.env.Append(CPPDEFINES = 'HAVE_getopt')
  if env['PLATFORM'] == 'win32':
    conf.env.Append(CPPDEFINES = 'WIN32_LEAN_AND_MEAN')
  if env['PLATFORM'] == 'win32':
    conf.CheckLib('user32')
    if not conf.CheckLib(['pthreadGC2', 'pthreadVC2', 'pthreadGC', 'pthreadVC', 'pthread']):
      print 'You must have the pthread library installed.'
      Exit(1)
    if not conf.CheckFunc('snprintf'):
      if conf.CheckFunc('_snprintf'):
        conf.env.Append(CPPDEFINES = 'snprintf=_snprintf')
      else:
        print 'The snprintf() function is not avaialble (very unusual).'
        Exit(1)
  else:
    # POSIX specific.
    if not conf.CheckLib('pthread'):
      print 'You must have the pthread library installed.'
      Exit(1)
  if env['debug'] == 1:
    if conf.CheckLib('flog'):
      conf.env.Append(CPPDEFINES = 'HAVE_flog')
  if conf.CheckCHeader('stdbool.h'):
    conf.env.Append(CPPDEFINES = 'HAVE_stdbool_h')
  if conf.CheckCHeader('ansidecl.h'):
    conf.env.Append(CPPDEFINES = 'HAVE_ansidecl_h')

  env = conf.Finish()

# Adapt to a debug build.
if env['debug'] == 1:
  print '*** DEBUG BUILD ***'
  env.Append(CPPDEFINES = '_DEBUG')
  if env['CC'] == 'cl':
    env.Append(CCFLAGS = '/Od /GX /EHsc /MDd /Z7')
    env.Append(LINKFLAGS = '/DEBUG /OPT:NOICF /OPT:NOREF')
  elif env['CC'] == 'gcc':
    env.Append(CCFLAGS = '-g -O0')

# Adapt to a release build.
else:
  if env['CC'] == 'cl':
    env.Append(CCFLAGS = '/Ox /G5 /GF /Gy /MD')
    env.Append(LINKFLAGS = '/RELEASE /OPT:REF /OPT:ICF')
  elif env['CC'] == 'gcc':
    env.Append(CCFLAGS = '-O3 -fomit-frame-pointer -finline-functions -fno-exceptions')
    env.Append(LINKFLAGS = '-s --gc-sections')

opts.Save('config.options', env)
Export('env', 'fnd')

SConscript('core/SConscript')

if env['modules'] == 1:
  SConscript('mods/SConscript')

if env['stubs'] == 1:
  SConscript('stub/SConscript')
