# SCons script for parabellym.
# $Id$
# vim:ts=4:sts=4:sw=4:et:nocindent:ft=python

import faerion
import os

# Version number.
version = '1.0'

# The helper object.
fae = faerion.Faerion()

Help("""
Usage: scons [options]

The following options are available:

  debug=yes   : include debug symbols and output.
  release=yes : set when you are preparing a release package.
  modules=yes : build sample modules, too.
  stubs=yes   : build loaders, too.
  srcdist=yes : build a source code tarball.

Send your comments to Justin Forest <justin.forest@gmail.com>
""")

# The directory in which built files are stored.
output_dir = 'build'

# Build options.
opts = Options('config.options')
opts.Add(BoolOption('debug', 'Set to include debug symbols and output', False))
opts.Add(BoolOption('modules', 'Set to build sample modules', False))
opts.Add(BoolOption('stubs', 'Set to build sample stubs', False))
opts.Add(BoolOption('scrdist', 'Set to build the source code tarball', False))
opts.Add(BoolOption('release', 'Set this option only if you are preparing a release', False))
opts.Add(EnumOption('build_tool', 'Override the build tool (for maintainers mostly)', 'default', allowed_values = ('default', 'mingw'), ignorecase = 1))

# The default environment.
env = Environment(options = opts)

# Override the tool if there are many installed.
if env['build_tool'] != 'default':
	env = Environment(tools = [env['build_tool']], options = opts)

env.Append(CPPDEFINES = [('VERSION', '\\"' + version + '\\"'), ('SOEXT', '\\"' + env['SHLIBSUFFIX'] + '\\"')])

# Check the system configuration if we're not cleaning up.
if env.GetOption('clean'):
	print 'Skipping autoconfiguration due to a clean-up.'
else:
    conf = fae.Configure(Configure(env), env)

	if not conf.CheckFunc('strlcpy'):
		conf.env.Append(CPPDEFINES = 'strlcpy=strlcpy_local')
	if not conf.CheckFunc('daemon'):
		conf.env.Append(CPPDEFINES = 'daemon=daemon_local')
	if conf.CheckFunc('getopt'):
		conf.env.Append(CPPDEFINES = 'HAVE_getopt')
	if env['PLATFORM'] == 'win32':
		conf.env.Append(CPPDEFINES = 'WIN32_LEAN_AND_MEAN')
	if env['PLATFORM'] == 'win32':
		conf.CheckLib('user32')
		if not conf.CheckLib(['pthreadGC2', 'pthreadVC2', 'pthreadGC', 'pthreadVC', 'pthread']):
			print 'You must have the pthread library installed.'
			Exit(1)
		if not conf.CheckFunc('snprintf'):
			if conf.CheckFunc('_snprintf'):
				conf.env.Append(CPPDEFINES = 'snprintf=_snprintf')
			else:
				print 'The snprintf() function is not avaialble (very unusual).'
				Exit(1)
	else:
		# POSIX specific.
		if not conf.CheckLib('pthread'):
			print 'You must have the pthread library installed.'
			Exit(1)
	if env['debug'] == 1:
		if conf.CheckLib('flog'):
			conf.env.Append(CPPDEFINES = 'HAVE_flog')
	if conf.CheckCHeader('ansidecl.h'):
		conf.env.Append(CPPDEFINES = 'HAVE_ansidecl_h')
	if conf.CheckCHeader('stdbool.h'):
		conf.env.Append(CPPDEFINES = 'HAVE_stdbool_h')

    env = fae.FinishConf(conf)

opts.Save('config.options', env)
Export('env', 'fae')

SConscript('core/SConscript')

if env['modules'] == 1:
	SConscript('mods/SConscript')

if env['stubs'] == 1:
	SConscript('stub/SConscript')

if env['release'] == 1:
    fae.makeInstaller(env, '.', 'parabellym-' + version, r'^(SCons.*|LICENSE|.*\.(cc|css|docbook|h|py))$')
